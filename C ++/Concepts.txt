How to compile : g++ practise_cpp.cpp 
How to run : ./a.out

What happens when you run g++ : 
1. Pre-processing : The preprocessor (cpp) processes #include, #define, and other preprocessor directives. The result is a single expanded source file. It only brings in the declarations and prototypes and not the actual implementation. This is done to check for syntax and semantics in the next step and actual inclusion of files is done in linking.
2. Compilation : The compiler converts the preprocessed source code into assembly code. Syntax and semantics are checked at this stage.
3. Assembly : The assembler (as) converts the assembly code into machine code (object code).
4. Linking : The linker (ld) combines the object file (main.o) with standard libraries (e.g., libstdc++) and other dependencies. The result is an executable binary file (by default named a.out).

Data Types Sizes : 
    Data Type	Size (in bytes) on 64bit
    int	            4
    short int	    2
    long int	    8
    long long int	8
    unsigned int	4
    signed int	    4
    float	        4
    double	        8
    long double	    8
    char	        1
    bool	        1
    void*	        8

Const vs Constexpr :
    1. constexpr ensures the value is known and evaluated at compile-time.
    2. const allows values that are only evaluated at runtime.
Benefit of using Constexpr : Inlining of constexpr Functions : When a function is marked constexpr, it means the function's return value can be determined at compile-time if provided with constant arguments. Instead of calling a function at runtime, the compiler replaces the function call with its actual code (the function body) during compilation. This eliminates the function call overhead (e.g., stack operations, passing arguments, etc.).
Why Inlining can't be done to all functions : Because function definition is not completely available during compile time. This happens only during linking. During compile you can find only the template. 