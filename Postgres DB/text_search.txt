Text search in PostgreSQL is a powerful feature that allows you to search for text patterns within a database. PostgreSQL provides a full-text search capability using tsvector and tsquery types. Here are some examples of how to use text search in PostgreSQL:

1. Creating a Full-Text Search Vector
First, you'll need to create a tsvector column that stores the searchable text.
-- Creating a table with a column for full-text search
CREATE TABLE documents (id serial PRIMARY KEY,title text,body text,tsvector_body tsvector);

-- Inserting some example data
INSERT INTO documents (title, body)
VALUES
('First Document', 'This is the body of the first document.'),
('Second Document', 'The body of the second document contains different text.'),
('Third Document', 'Another document with unique content.');

-- Updating the tsvector column with a full-text search vector
UPDATE documents SET tsvector_body = to_tsvector(title || ' ' || body);

2. Simple Text Search
You can perform a basic full-text search using to_tsquery.
-- Searching for documents containing the word 'document' : 
SELECT title, body FROM documents WHERE tsvector_body @@ to_tsquery('document');

3. Phrase Search
You can search for phrases by connecting words with <-> in tsquery.
-- Searching for documents containing the phrase 'first document'
SELECT title, body FROM documents WHERE tsvector_body @@ to_tsquery('first <-> document');

4. Ranking Search Results
You can rank search results based on relevance using the ts_rank function.
SELECT title, body, ts_rank(tsvector_body, to_tsquery('document')) AS rank FROM documents WHERE tsvector_body @@ to_tsquery('document') ORDER BY rank DESC;

6. Search with Multiple Words
You can search for multiple words or synonyms using the | operator.
-- Searching for documents containing either 'first' or 'second'
SELECT title, body FROM documents WHERE tsvector_body @@ to_tsquery('first | second');

7. Updating the tsvector Automatically
You can use a trigger to automatically update the tsvector column whenever the data changes.
-- Creating a trigger function
CREATE FUNCTION documents_tsvector_trigger() RETURNS trigger AS $$
BEGIN
  NEW.tsvector_body := to_tsvector(NEW.title || ' ' || NEW.body);
  RETURN NEW;
END
$$ LANGUAGE plpgsql;

-- Creating a trigger on the documents table
CREATE TRIGGER tsvectorupdate BEFORE INSERT OR UPDATE ON documents FOR EACH ROW EXECUTE FUNCTION documents_tsvector_trigger();

8. Creating an Index for Full-Text Search
For better performance, you can create a GIN (Generalized Inverted Index) on the tsvector column.

-- Creating a GIN index on the tsvector column
CREATE INDEX idx_tsvector_body ON documents USING GIN(tsvector_body);

9. Highlighting Search Results
You can highlight the search terms in the results using ts_headline.
-- Highlighting the search term 'document' in the results
SELECT title, ts_headline(body, to_tsquery('document')) AS highlighted_body
FROM documents
WHERE tsvector_body @@ to_tsquery('document');

10. Normalization : Stemming and Removing stop words : 
a. Stemming : Reducing words to their root form to handle variations in text (e.g., running, runs -> run).
-- Stemming words using the 'english' dictionary in a text search vector
SELECT to_tsvector('english', 'running runs runner') AS stemmed_words;

b. Removing stop words : Words that don't contribute much to the meaning of a sentence (e.g., and, the, is).
SELECT to_tsvector('english', 'This is a simple text example with stop words.') AS no_stop_words;