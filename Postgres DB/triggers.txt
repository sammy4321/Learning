Triggers in PostgreSQL are special procedures that are automatically invoked in response to certain events on a table or view, such as INSERT, UPDATE, or DELETE. Below are examples demonstrating how to create and use triggers in PostgreSQL:

1. Basic Trigger Example
This example creates a trigger that logs changes made to a table.

Step 1: Create a Table and a Log Table
Let's start by creating a users table and a users_log table to record changes.

-- Creating the main table
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    username TEXT NOT NULL,
    email TEXT NOT NULL
);

-- Creating a log table to track changes
CREATE TABLE users_log (
    log_id SERIAL PRIMARY KEY,
    user_id INTEGER,
    username TEXT,
    email TEXT,
    changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    operation TEXT
);

Step 2: Create a Trigger Function
Next, create a trigger function that inserts a record into users_log whenever an INSERT, UPDATE, or DELETE operation is performed on the users table.

-- Creating a trigger function
CREATE OR REPLACE FUNCTION log_user_changes()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        INSERT INTO users_log (user_id, username, email, operation)
        VALUES (NEW.user_id, NEW.username, NEW.email, TG_OP);
        RETURN NEW;
    ELSIF TG_OP = 'UPDATE' THEN
        INSERT INTO users_log (user_id, username, email, operation)
        VALUES (NEW.user_id, NEW.username, NEW.email, TG_OP);
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        INSERT INTO users_log (user_id, username, email, operation)
        VALUES (OLD.user_id, OLD.username, OLD.email, TG_OP);
        RETURN OLD;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

Step 3: Create the Trigger : Now, create the trigger that calls the log_user_changes function on the users table.
-- Creating the trigger
CREATE TRIGGER user_changes_trigger AFTER INSERT OR UPDATE OR DELETE ON users FOR EACH ROW EXECUTE FUNCTION log_user_changes();

