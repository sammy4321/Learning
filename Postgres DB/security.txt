Roles : 
Definition: In PostgreSQL, a role is a database object that can own database objects and have database privileges. Roles can be users, groups, or both.
Types: Roles can be either login roles (which can connect to the database) or group roles (which cannot connect but can have other roles as members).
Usage: Roles are used to manage permissions and access controls. They can have privileges on databases, schemas, tables, etc., and can be granted to other roles.

Users : 
Definition: A user in PostgreSQL is essentially a role with login capabilities. In other words, a user is a type of role that has the ability to log in to the database.
Purpose: Users are typically created to provide specific individuals with access to the database.

Example of assigning a role to user : 
-- Create a role : 
CREATE ROLE admin_role;
-- Create a user : 
CREATE USER john_doe WITH PASSWORD 'secure_password';
-- Grant a role to a user
GRANT admin_role TO john_doe;


Security is set by roles. Users can be assigned certain roles. 
Securing a PostgreSQL database involves various levels of protection, each addressing different aspects of database security. Here's a detailed explanation of security at each level, along with SQL queries to help you manage it:

1. Instance Level
Instance-level security deals with securing the PostgreSQL server itself. This includes configuring access controls, network security, and managing user permissions for connecting to the database.

Key Aspects:

Authentication: Ensuring that only authorized users can connect to the PostgreSQL server.
Network Security: Configuring firewalls and network rules to control which IP addresses can connect to the PostgreSQL server.
SQL Queries:

To manage user authentication, you would configure pg_hba.conf file (outside of SQL):
# Example pg_hba.conf entry to allow local connections
host    all             all             127.0.0.1/32            trust

2. Database Level
Database-level security focuses on permissions and access control specific to individual databases within the PostgreSQL instance.

Key Aspects:

Roles and Permissions: Managing which roles (users or groups) have access to specific databases.
SQL Queries:

Create a new database:
CREATE DATABASE my_database;

Grant access to a role:
GRANT CONNECT ON DATABASE my_database TO my_role;

3. Schema Level
Schema-level security involves managing access to schemas within a database. Schemas are organizational containers within a database.

Key Aspects:

Access Control: Defining which roles can access or modify objects within a schema.
SQL Queries:

Create a new schema:
CREATE SCHEMA my_schema;

Grant usage on a schema:
GRANT USAGE ON SCHEMA my_schema TO my_role;

4. Table Level
Table-level security involves managing access to individual tables within a schema. This controls which roles can perform operations like SELECT, INSERT, UPDATE, or DELETE on tables.

Key Aspects:

Table Permissions: Controlling which roles can access or modify tables.
SQL Queries:

Create a new table:
CREATE TABLE my_schema.my_table (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100)
);

Grant permissions on a table:
GRANT SELECT, INSERT, UPDATE ON my_schema.my_table TO my_role;


5. Column Level
Column-level security allows for fine-grained access control on specific columns within a table. This is useful when you want to restrict access to sensitive data.

Key Aspects:

Column Permissions: Granting or revoking permissions on individual columns.
SQL Queries:

PostgreSQL does not support column-level permissions directly. Instead, you can achieve this through views:
Create a view to restrict access:
CREATE VIEW restricted_view AS
SELECT id, name FROM my_schema.my_table;

Grant access to the view:
GRANT SELECT ON restricted_view TO my_role;

6. Row Level
Row-level security (RLS) allows you to enforce access control policies that restrict which rows of a table a user can see or modify.

Key Aspects:

Row-Level Security Policies: Defining policies that restrict access based on row content.
SQL Queries:

Enable RLS on a table:
ALTER TABLE my_schema.my_table ENABLE ROW LEVEL SECURITY;

Create a policy:
CREATE POLICY my_policy
ON my_schema.my_table
USING (user_id = current_user_id());  -- Assuming `user_id` column exists and you have a function to get current user id

Apply the policy:
ALTER TABLE my_schema.my_table
ENABLE ROW LEVEL SECURITY;

By understanding and applying these different levels of security, you can protect your PostgreSQL database from unauthorized access and ensure that sensitive data is handled appropriately.