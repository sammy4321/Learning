Transactions in PostgreSQL are a way to ensure that a sequence of database operations are executed atomically. Here’s an example of a simple transaction in PostgreSQL:
    BEGIN; -- Start the transaction
    -- Deduct 100.00 from Alice's account
    UPDATE accounts SET balance = balance - 100.00 WHERE name = 'Alice';
    -- Add 100.00 to Bob's account
    UPDATE accounts SET balance = balance + 100.00 WHERE name = 'Bob';
    COMMIT; -- Commit the transaction
If something goes wrong during the transaction, you can use ROLLBACK to undo all the operations within the transaction:
ROLLBACK; -- Rollback the transaction

ACID is an acronym that stands for Atomicity, Consistency, Isolation, and Durability. These are the set of properties that guarantee reliable processing of database transactions. Let’s break down each property :
    1. Atomicity: This property ensures that all operations within a transaction are treated as a single unit. It means that either all operations are executed successfully, or none are. If any part of the transaction fails, the entire transaction is rolled back, and the database state is left unchanged.
    2. Consistency: Consistency ensures that a transaction can only bring the database from one valid state to another, maintaining database invariants. Before and after a transaction, the database must remain consistent. Any data written to the database must be valid according to all defined rules, including constraints, cascades, triggers, and any combination thereof.
    3. Isolation: This property ensures that the concurrent execution of transactions results in a system state that would be obtained if transactions were executed serially, i.e., one after the other. Isolation prevents transactions from interfering with each other and ensures that they do not read intermediate data.
    4. Durability: Durability guarantees that once a transaction has been committed, it will remain so, even in the event of power loss, crashes, or errors. This means that the changes made by the transaction are permanently stored in the database and can be recovered in case of a system failure.
These properties are crucial for ensuring the integrity and reliability of transactions in a database management system (DBMS).

Partial Rollback with Savepoints : 
    BEGIN; -- Start the transaction
    -- Insert a record into table1
    INSERT INTO table1 VALUES (1);
    -- Create a savepoint named 'my_savepoint'
    SAVEPOINT my_savepoint;
    -- Insert another record into table1
    INSERT INTO table1 VALUES (2);
    -- Roll back to the savepoint, the above INSERT is undone
    ROLLBACK TO SAVEPOINT my_savepoint;
    -- Insert a different record into table1
    INSERT INTO table1 VALUES (3);
    -- Release the savepoint
    RELEASE SAVEPOINT my_savepoint;
    -- The transaction still includes the first and third INSERT
    COMMIT; -- Commit the transaction

How to fix aborted transaction(If there was error while running any command inbetween being and commit) : Use ROLLBACK.
How to fix transactions on crash : Postgres automatically rollbacks if there is any crash.