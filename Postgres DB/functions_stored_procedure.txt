In PostgreSQL, functions and stored procedures are essential for encapsulating and reusing logic within the database. Here are examples of both:

1. Functions in PostgreSQL
Functions in PostgreSQL are blocks of code that can return a value. They can be written in SQL, PL/pgSQL, or other languages supported by PostgreSQL.

Example 1: Simple SQL Function
This function takes two integers as input and returns their sum.

-- Creating a simple SQL function to add two numbers
CREATE OR REPLACE FUNCTION add_numbers(a INTEGER, b INTEGER)
RETURNS INTEGER AS $$
BEGIN
    RETURN a + b;
END;
$$ LANGUAGE plpgsql;

-- Calling the function
SELECT add_numbers(10, 20) AS result;
Result:
 result 
--------
     30

Example 2: Function Returning a Table
This function returns multiple rows as a result, similar to a query result.

-- Creating a function that returns a set of records
CREATE OR REPLACE FUNCTION get_employees()
RETURNS TABLE(employee_id INTEGER, employee_name TEXT) AS $$
BEGIN
    RETURN QUERY
    SELECT id, name FROM employees;
END;
$$ LANGUAGE plpgsql;

-- Calling the function
SELECT * FROM get_employees();
Result: (Example output assuming the employees table exists)

 employee_id | employee_name 
-------------+---------------
           1 | John Doe
           2 | Jane Smith
           3 | Alice Johnson
Example 3: Function with Conditional Logic
This function checks if a number is even or odd.

-- Creating a function to check if a number is even or odd
CREATE OR REPLACE FUNCTION is_even(num INTEGER)
RETURNS TEXT AS $$
BEGIN
    IF num % 2 = 0 THEN
        RETURN 'Even';
    ELSE
        RETURN 'Odd';
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Calling the function
SELECT is_even(5) AS result;
Result:

 result 
--------
 Odd

2. Stored Procedures in PostgreSQL
Stored procedures are similar to functions but are used primarily for performing actions rather than returning values. Stored procedures can execute queries, perform updates, and include transaction control (e.g., COMMIT, ROLLBACK).

Example 1: Simple Stored Procedure
This procedure inserts a new employee into the employees table.

-- Creating a stored procedure to insert a new employee
CREATE OR REPLACE PROCEDURE add_employee(employee_name TEXT, employee_salary NUMERIC)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO employees (name, salary) VALUES (employee_name, employee_salary);
END;
$$;

-- Calling the stored procedure
CALL add_employee('John Doe', 50000);
Result:
The employees table now includes a new row with the specified name and salary.

Example 2: Stored Procedure with Transaction Control
This procedure transfers money between two accounts and uses transaction control to ensure the operation is atomic.

-- Creating a stored procedure for transferring money between accounts
CREATE OR REPLACE PROCEDURE transfer_money(sender_id INTEGER, receiver_id INTEGER, amount NUMERIC)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Start the transaction
    BEGIN TRANSACTION;

    -- Deduct the amount from the sender's account
    UPDATE accounts SET balance = balance - amount WHERE id = sender_id;

    -- Add the amount to the receiver's account
    UPDATE accounts SET balance = balance + amount WHERE id = receiver_id;

    -- Commit the transaction
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        -- Rollback the transaction in case of an error
        ROLLBACK;
        RAISE;
END;
$$;

-- Calling the stored procedure
CALL transfer_money(1, 2, 100.00);
Result:
The balance is updated for both accounts. If any part of the transaction fails, the entire operation is rolled back.

3. Stored Procedure with INOUT Parameters
This procedure demonstrates the use of INOUT parameters, which act as both input and output.

-- Creating a stored procedure with INOUT parameters
CREATE OR REPLACE PROCEDURE calculate_discount(INOUT price NUMERIC, discount_rate NUMERIC)
LANGUAGE plpgsql
AS $$
BEGIN
    price := price - (price * discount_rate / 100);
END;
$$;

-- Calling the stored procedure
DO $$
DECLARE
    final_price NUMERIC := 100;
BEGIN
    CALL calculate_discount(final_price, 10);
    RAISE NOTICE 'Final price after discount: %', final_price;
END $$;
Result:
The procedure modifies the final_price to reflect the discounted amount, and the new value is displayed using RAISE NOTICE.

Summary : 
1. Functions are best used when you need to encapsulate logic that returns a value, whether it's a single value or a set of records.
2. Stored Procedures are more suitable when you need to perform an action, especially when it involves transaction management, multiple updates, or changes to the database state.
These examples illustrate the flexibility and power of using functions and stored procedures to manage and manipulate data within PostgreSQL.