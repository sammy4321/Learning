1. Compute Engine - Virtual Machine. 
2. Cloud Storage - Can store files. 
3. Google Kubernetes Engine - Easily run dockers. 
4. Serveless Functions - Google Cloud Functions. 
5. Key Management - KMS. 
6. Databases - OLTP(Cloud SQL and Cloud Spanner), OLAP(BigQuery), NoSQL(Firestore and BigTable), In Memory(Memorystore).
7. Asynchronous Communication - Pub/Sub. 
8. Networking - Cloud Load Balancing, Cloud CDN, Cloud VPN, Cloud DNS.
9. App Engine : Google App Engine is a fully managed platform-as-a-service (PaaS) that allows developers to build, deploy, and scale applications without managing the underlying infrastructure.
10. Google Identity Platform : The Google Cloud Platform (GCP) alternative to AWS Cognito is Google Identity Platform. This suite of services offers user authentication, authorization, and user management features, similar to what AWS Cognito provides.

Here's a table summarizing the key differences between Google Cloud's Cloud SQL and Cloud Spanner:

| **Feature**                   | **Cloud SQL**                                       | **Cloud Spanner**                                   |
|-------------------------------|----------------------------------------------------|----------------------------------------------------|
| **Type**                      | Managed relational database (MySQL, PostgreSQL, SQL Server) | Managed, horizontally scalable relational database |
| **Scalability**               | Vertical scaling with limited horizontal scaling (read replicas) | Horizontal scaling across nodes, regions, and globally |
| **Data Model**                | Traditional relational database model              | Relational model with support for interleaved tables and hierarchical data |
| **Use Cases**                 | Small to medium-sized applications, traditional web apps, lift-and-shift | Large-scale, global, mission-critical applications |
| **Availability & Consistency**| High availability within a single region, eventual consistency for read replicas | Global distribution with strong consistency and 99.999% availability |
| **Performance**               | Dependent on instance size, moderate performance   | High performance with low-latency reads/writes at scale |
| **Pricing**                   | Lower cost, based on instance size and storage      | Higher cost, based on nodes, designed for large-scale use |
| **Maintenance**               | Fully managed with automated backups and updates   | Fully managed with minimal manual intervention, especially in scaling |
| **Transactions**              | ACID transactions within a single database         | Globally distributed ACID transactions with strong consistency |
| **Integration**               | Integrates with Google Cloud services and third-party tools | Integrates with Google Cloudâ€™s analytics and AI services, designed for distributed architectures |

Here's a table summarizing the key differences between Google Cloud's Firestore and Bigtable:

| **Feature**                   | **Firestore**                                      | **Bigtable**                                      |
|-------------------------------|---------------------------------------------------|--------------------------------------------------|
| **Type**                      | NoSQL document database                            | NoSQL wide-column database                         |
| **Data Model**                | Document-based (JSON-like documents grouped into collections) | Wide-column store (rows, columns, column families) |
| **Use Cases**                 | Real-time applications, mobile apps, user profiles, chat apps | High-throughput analytical workloads, time-series data, IoT |
| **Scalability**               | Horizontally scalable, automatic scaling for reads/writes | Horizontally scalable, designed for massive scale (petabytes) |
| **Consistency**               | Strong consistency in native mode, eventual consistency in Datastore mode | Strong consistency within a single cluster, eventual consistency across clusters |
| **Performance**               | Optimized for low-latency, real-time reads and writes | Optimized for high-throughput, low-latency reads and writes |
| **Global Distribution**       | Multi-region replication, real-time synchronization | Single-region or multi-cluster across regions (with eventual consistency) |
| **Querying**                  | Rich querying with support for filters, sorting, and transactions | Limited querying (primary key and secondary indexes) |
| **Schema**                    | Schema-less, flexible document structure           | Schema-less, but requires careful design of rows and column families |
| **Transactions**              | Supports ACID transactions across multiple documents | Single-row transactions, limited multi-row transactions |
| **Integration**               | Integrates with Firebase, Google Cloud services, and real-time features | Integrates with Google Cloud services, Apache HBase API compatibility |
| **Pricing**                   | Based on storage, document reads/writes, and bandwidth | Based on storage, throughput (read/write operations), and nodes |
| **Ease of Use**               | Easier to use with automatic scaling and rich query capabilities | More complex, requires careful schema design for performance optimization |