Example that uses AWS, terraform, jenkins and ansible : 

Scenario: You want to deploy a web application on AWS. The infrastructure is defined using Terraform, the deployment pipeline is managed with Jenkins, and configuration management is handled by Ansible.

Steps:
1. Define Infrastructure with Terraform : Create a Terraform configuration to set up the necessary AWS infrastructure, such as an EC2 instance, a security group, and an S3 bucket.
        # main.tf

        provider "aws" {
        region = "us-east-1"
        }

        resource "aws_instance" "web" {
        ami           = "ami-0c55b159cbfafe1f0" # Example AMI
        instance_type = "t2.micro"

        tags = {
            Name = "WebServer"
        }
        }

        resource "aws_security_group" "web_sg" {
        name        = "web_sg"
        description = "Allow HTTP traffic"

        ingress {
            from_port   = 80
            to_port     = 80
            protocol    = "tcp"
            cidr_blocks = ["0.0.0.0/0"]
        }

        egress {
            from_port   = 0
            to_port     = 0
            protocol    = "-1"
            cidr_blocks = ["0.0.0.0/0"]
        }
        }

        output "instance_ip" {
        value = aws_instance.web.public_ip
        }

2. CI/CD Pipeline with Jenkins : Set up a Jenkins pipeline to automate the infrastructure deployment and application provisioning.
        pipeline {
            agent any
            environment {
                AWS_CREDENTIALS = credentials('aws-credentials')
            }
            stages {
                stage('Terraform Init') {
                    steps {
                        script {
                            sh 'terraform init'
                        }
                    }
                }
                stage('Terraform Plan') {
                    steps {
                        script {
                            sh 'terraform plan -out=tfplan'
                        }
                    }
                }
                stage('Terraform Apply') {
                    steps {
                        script {
                            sh 'terraform apply tfplan'
                        }
                    }
                }
                stage('Ansible Setup') {
                    steps {
                        script {
                            def instance_ip = sh(script: "terraform output -raw instance_ip", returnStdout: true).trim()
                            writeFile file: 'inventory', text: "${instance_ip} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa"
                        }
                    }
                }
                stage('Configure with Ansible') {
                    steps {
                        script {
                            sh 'ansible-playbook -i inventory playbook.yml'
                        }
                    }
                }
            }
        }

3. Ansible Playbook for Configuration : Use Ansible to configure the EC2 instance, installing necessary packages and deploying the web application.
        # playbook.yml

        - hosts: all
        become: yes
        tasks:
            - name: Install NGINX
            yum:
                name: nginx
                state: present

            - name: Start NGINX
            service:
                name: nginx
                state: started
                enabled: yes

            - name: Copy website files
            copy:
                src: /path/to/your/website/
                dest: /usr/share/nginx/html/

Flow Overview:
    Terraform: Terraform is used to provision the AWS infrastructure.
    Jenkins: Jenkins is used to automate the deployment pipeline, from running Terraform commands to triggering Ansible playbooks.
    Ansible: Ansible configures the EC2 instance by installing necessary software and deploying the web application.
Execution:
    Jenkins pulls the latest code and triggers the pipeline.
    Terraform provisions the AWS infrastructure (EC2 instance, security groups).
    Ansible configures the provisioned infrastructure, installs NGINX, and deploys the web application.
    This example demonstrates how these tools can work together to automate the deployment process for an application in the cloud.