Let's use a real-life example of a logging system to illustrate the differences between RabbitMQ and Kafka.

Scenario: Logging System
Imagine you have a system where various applications generate logs, and you need to process and analyze these logs in real-time. You have two options for managing this logging system: using RabbitMQ or Kafka.

RabbitMQ : 
1. Use Case: RabbitMQ is well-suited for scenarios where you need reliable message delivery and can tolerate some delay in processing. It’s often used for managing tasks and distributing workloads among multiple consumers.
2 Setup: In RabbitMQ, you might set up a logging queue where your applications (producers) send log messages. RabbitMQ will route these messages to one or more queues based on your configuration (e.g., direct or topic exchanges).
3. Processing: Consumers (e.g., log processors) will read from these queues. RabbitMQ ensures that each message is delivered to a consumer and provides acknowledgment that the message has been processed.
4. Message Durability: Messages can be configured to be durable, meaning they won’t be lost even if RabbitMQ crashes. However, RabbitMQ’s primary focus is on reliable message delivery rather than high throughput.
5. Example: If your logging system needs to distribute log messages to different services for real-time processing and you want to ensure each message is processed exactly once, RabbitMQ is a good choice. It’s ideal for scenarios where the focus is on managing task queues with potential retries.

Kafka : 
1. Use Case: Kafka is designed for high-throughput, distributed, and durable streaming of messages. It excels in scenarios where you need to handle large volumes of data and perform real-time analytics.
2. Setup: In Kafka, you would set up a topic (e.g., "logs") where your applications (producers) send log messages. Kafka partitions this topic to handle high throughput and allows logs to be distributed across multiple brokers.
3. Processing: Consumers (e.g., log analyzers) subscribe to the topic and process messages. Kafka provides features for managing offsets, ensuring that each message can be processed multiple times or by multiple consumers if needed.
4. Message Durability: Kafka ensures high durability by replicating partitions across multiple brokers. This means even if a broker fails, messages are preserved, and processing can continue.
5. Example: If your logging system requires processing high volumes of logs in real-time, with the ability to perform analytics and reprocessing of historical data, Kafka is a better choice. It’s ideal for scenarios where you need to handle and analyze large streams of data efficiently and maintain a robust history of log messages.

Summary : 
1. RabbitMQ is more about reliable, message-oriented middleware with flexible routing and is better suited for task queues and scenarios requiring message delivery guarantees.
2. Kafka is more about high-throughput, distributed event streaming, providing robust, scalable solutions for processing and analyzing large volumes of data in real-time.

In the context of a logging system, RabbitMQ would be used if you need reliable message delivery and straightforward task distribution, while Kafka would be used if you need high throughput and advanced features for real-time data processing and analysis.