Here are some more dunder methods in Python:

1. `__init__(self)`: The constructor method, called when an instance is created.

class Myclass:
    def __init__(self, name):
        self.name = name

obj = Myclass("John")
print(obj.name)  # Output: John

2. `__str__(self)`: Returns a string representation of the object.

class Myclass:
    def __str__(self):
        return "Hello, " + self.name

obj = Myclass("John")
print(obj)  # Output: Hello, John

3. `__repr__(self)`: Returns a representation of the object (usually useful for debugging).

class Myclass:
    def __repr__(self):
        return f"Myclass('{self.name}')"

obj = Myclass("John")
print(obj)  # Output: Myclass('John')

4. `__eq__(self, other)`: Checks if two objects are equal.

class Myclass:
    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        return self.name == other.name

obj1 = Myclass("John")
obj2 = Myclass("John")
print(obj1 == obj2)  # Output: True

5. `__add__(self, other)`: Implements the addition operator (+).

class Myclass:
    def __init__(self, value):
        self.value = value

    def __add__(self, other):
        return Myclass(self.value + other.value)

obj1 = Myclass(5)
obj2 = Myclass(7)
result = obj1 + obj2
print(result.value)  # Output: 12

6. `__sub__(self, other)`: Implements the subtraction operator (-).

class Myclass:
    def __init__(self, value):
        self.value = value

    def __sub__(self, other):
        return Myclass(self.value - other.value)

obj1 = Myclass(5)
obj2 = Myclass(7)
result = obj1 - obj2
print(result.value)  # Output: -2

7. `__mul__(self, other)`: Implements the multiplication operator (*) and division operator (/).

class Myclass:
    def __init__(self, value):
        self.value = value

    def __mul__(self, other):
        return Myclass(self.value * other.value)

    def __div__(self, other):
        return Myclass(self.value / other.value)

obj1 = Myclass(5)
obj2 = Myclass(7)
result = obj1 * obj2
print(result.value)  # Output: 35.0

8. `__len__(self)`: Returns the length of the object.

class Myclass:
    def __init__(self, values):
        self.values = values

    def __len__(self):
        return len(self.values)

obj = Myclass([1, 2, 3, 4, 5])
print(len(obj))  # Output: 5

9. `__getitem__(self, index)`: Allows accessing elements of the object using indexing.

class Myclass:
    def __init__(self, values):
        self.values = values

    def __getitem__(self, index):
        return self.values[index]

obj = Myclass([1, 2, 3, 4, 5])
print(obj[0])  # Output: 1

10. `__setitem__(self, index, value)`: Allows modifying elements of the object using indexing.

class Myclass:
    def __init__(self, values):
        self.values = values

    def __setitem__(self, index, value):
        self.values[index] = value

obj = Myclass([1, 2, 3, 4, 5])
obj[0] = 10
print(obj.values)  # Output: [10, 2, 3, 4, 5]

These are just a few examples of dunder methods in Python. They are very powerful and can be used to add custom behavior to your classes.
