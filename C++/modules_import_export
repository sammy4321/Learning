Certainly! Modules are a feature introduced in C++20 to improve the modularity and compilation time of C++ programs. They provide a way to encapsulate code and its interface, avoiding some of the pitfalls of traditional header files. Here's an example demonstrating how to use modules in C++20.

Example with Modules
1. Creating a Module Interface
Create a file named math_module.cppm (the .cppm extension indicates a module interface unit) :
    // math_module.cppm
    export module math_module; // Declare this as a module named 'math_module'
    export int add(int a, int b) {
        return a + b;
    }
    export int multiply(int a, int b) {
        return a * b;
    }
2. Using the Module
    Create a file named main.cpp that uses the module: 
    // main.cpp
    import math_module; // Import the 'math_module' module
    #include <iostream>
    int main() {
        int a = 5;
        int b = 3;
        std::cout << "Sum: " << add(a, b) << std::endl;
        std::cout << "Product: " << multiply(a, b) << std::endl;
        return 0;
    }
Compilation and Execution : To compile and run this code, you need to use a compiler that supports C++20 modules. Hereâ€™s how you might compile the files using g++ (or clang++), assuming you have a compiler that supports modules :
    g++ -std=c++20 -c math_module.cppm -o math_module.o
    g++ -std=c++20 main.cpp math_module.o -o main
    ./main
